/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TasksRouteRouteImport } from './routes/tasks/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TasksIndexRouteImport } from './routes/tasks/index'
import { Route as TasksNewRouteImport } from './routes/tasks/new'
import { Route as TasksIdRouteRouteImport } from './routes/tasks/$id/route'
import { Route as TasksIdIndexRouteImport } from './routes/tasks/$id/index'

const TasksRouteRoute = TasksRouteRouteImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksIndexRoute = TasksIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TasksRouteRoute,
} as any)
const TasksNewRoute = TasksNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => TasksRouteRoute,
} as any)
const TasksIdRouteRoute = TasksIdRouteRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => TasksRouteRoute,
} as any)
const TasksIdIndexRoute = TasksIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TasksIdRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/tasks': typeof TasksRouteRouteWithChildren
  '/tasks/$id': typeof TasksIdRouteRouteWithChildren
  '/tasks/new': typeof TasksNewRoute
  '/tasks/': typeof TasksIndexRoute
  '/tasks/$id/': typeof TasksIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/tasks/new': typeof TasksNewRoute
  '/tasks': typeof TasksIndexRoute
  '/tasks/$id': typeof TasksIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/tasks': typeof TasksRouteRouteWithChildren
  '/tasks/$id': typeof TasksIdRouteRouteWithChildren
  '/tasks/new': typeof TasksNewRoute
  '/tasks/': typeof TasksIndexRoute
  '/tasks/$id/': typeof TasksIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/tasks'
    | '/tasks/$id'
    | '/tasks/new'
    | '/tasks/'
    | '/tasks/$id/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/tasks/new' | '/tasks' | '/tasks/$id'
  id:
    | '__root__'
    | '/'
    | '/tasks'
    | '/tasks/$id'
    | '/tasks/new'
    | '/tasks/'
    | '/tasks/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TasksRouteRoute: typeof TasksRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/tasks': {
      id: '/tasks'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/': {
      id: '/tasks/'
      path: '/'
      fullPath: '/tasks/'
      preLoaderRoute: typeof TasksIndexRouteImport
      parentRoute: typeof TasksRouteRoute
    }
    '/tasks/new': {
      id: '/tasks/new'
      path: '/new'
      fullPath: '/tasks/new'
      preLoaderRoute: typeof TasksNewRouteImport
      parentRoute: typeof TasksRouteRoute
    }
    '/tasks/$id': {
      id: '/tasks/$id'
      path: '/$id'
      fullPath: '/tasks/$id'
      preLoaderRoute: typeof TasksIdRouteRouteImport
      parentRoute: typeof TasksRouteRoute
    }
    '/tasks/$id/': {
      id: '/tasks/$id/'
      path: '/'
      fullPath: '/tasks/$id/'
      preLoaderRoute: typeof TasksIdIndexRouteImport
      parentRoute: typeof TasksIdRouteRoute
    }
  }
}

interface TasksIdRouteRouteChildren {
  TasksIdIndexRoute: typeof TasksIdIndexRoute
}

const TasksIdRouteRouteChildren: TasksIdRouteRouteChildren = {
  TasksIdIndexRoute: TasksIdIndexRoute,
}

const TasksIdRouteRouteWithChildren = TasksIdRouteRoute._addFileChildren(
  TasksIdRouteRouteChildren,
)

interface TasksRouteRouteChildren {
  TasksIdRouteRoute: typeof TasksIdRouteRouteWithChildren
  TasksNewRoute: typeof TasksNewRoute
  TasksIndexRoute: typeof TasksIndexRoute
}

const TasksRouteRouteChildren: TasksRouteRouteChildren = {
  TasksIdRouteRoute: TasksIdRouteRouteWithChildren,
  TasksNewRoute: TasksNewRoute,
  TasksIndexRoute: TasksIndexRoute,
}

const TasksRouteRouteWithChildren = TasksRouteRoute._addFileChildren(
  TasksRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TasksRouteRoute: TasksRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
